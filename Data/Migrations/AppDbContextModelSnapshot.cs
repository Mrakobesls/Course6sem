// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccessLevelCheckpoint", b =>
                {
                    b.Property<int>("AccessLevelsId")
                        .HasColumnType("int");

                    b.Property<int>("CheckpointsId")
                        .HasColumnType("int");

                    b.HasKey("AccessLevelsId", "CheckpointsId");

                    b.HasIndex("CheckpointsId");

                    b.ToTable("AccessLevelCheckpoint");
                });

            modelBuilder.Entity("AccessLevelUser", b =>
                {
                    b.Property<int>("AccessLevelsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("AccessLevelsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AccessLevelUser");
                });

            modelBuilder.Entity("CheckpointRoom", b =>
                {
                    b.Property<int>("CheckpointsId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("CheckpointsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("CheckpointRoom");
                });

            modelBuilder.Entity("Data.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AccessLevel");
                });

            modelBuilder.Entity("Data.Models.Checkpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Checkpoint");
                });

            modelBuilder.Entity("Data.Models.MonthUserRoomTimeSpent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("MonthUserRoomTimeSpent");
                });

            modelBuilder.Entity("Data.Models.PassageDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CheckpointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("UserId");

                    b.ToTable("PassageDate");
                });

            modelBuilder.Entity("Data.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Program admin"
                        });
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Worker"
                        });
                });

            modelBuilder.Entity("Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Пространство вне объекта",
                            Name = "Улица"
                        });
                });

            modelBuilder.Entity("Data.Models.RoomTimeSpent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EnterPassageDateId")
                        .HasColumnType("int");

                    b.Property<int>("ExitPassageDateId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnterPassageDateId")
                        .IsUnique();

                    b.HasIndex("ExitPassageDateId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("RoomTimeSpent");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoomId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentRoomId = 1,
                            Email = "admin@admin.com",
                            IsDisabled = false,
                            Login = "Admin",
                            Name = "Admin",
                            Password = "10000.E1oWoDmucer3gKs31Cd1NA==.acfwsZcyNgPBDPw7KDCwtPp6g7lVZCYfVBMJppZtaQQ=",
                            Patronymic = "Admin",
                            PositionId = 1,
                            RoleId = 1,
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("AccessLevelCheckpoint", b =>
                {
                    b.HasOne("Data.Models.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Checkpoint", null)
                        .WithMany()
                        .HasForeignKey("CheckpointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccessLevelUser", b =>
                {
                    b.HasOne("Data.Models.AccessLevel", null)
                        .WithMany()
                        .HasForeignKey("AccessLevelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckpointRoom", b =>
                {
                    b.HasOne("Data.Models.Checkpoint", null)
                        .WithMany()
                        .HasForeignKey("CheckpointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.MonthUserRoomTimeSpent", b =>
                {
                    b.HasOne("Data.Models.Room", "Room")
                        .WithMany("MonthUserRoomTimeSpents")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("MonthRoomTimeSpents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.PassageDate", b =>
                {
                    b.HasOne("Data.Models.Checkpoint", "Checkpoint")
                        .WithMany()
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checkpoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.RoomTimeSpent", b =>
                {
                    b.HasOne("Data.Models.PassageDate", "EnterPassageDate")
                        .WithOne("StartTimeRoomSpent")
                        .HasForeignKey("Data.Models.RoomTimeSpent", "EnterPassageDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.PassageDate", "ExitPassageDate")
                        .WithOne("EndTimeRoomSpent")
                        .HasForeignKey("Data.Models.RoomTimeSpent", "ExitPassageDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Room", "Room")
                        .WithMany("RoomTimeSpents")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnterPassageDate");

                    b.Navigation("ExitPassageDate");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.HasOne("Data.Models.Room", "CurrentRoom")
                        .WithMany("Users")
                        .HasForeignKey("CurrentRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentRoom");

                    b.Navigation("Position");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Models.PassageDate", b =>
                {
                    b.Navigation("EndTimeRoomSpent")
                        .IsRequired();

                    b.Navigation("StartTimeRoomSpent")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.Room", b =>
                {
                    b.Navigation("MonthUserRoomTimeSpents");

                    b.Navigation("RoomTimeSpents");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("MonthRoomTimeSpents");
                });
#pragma warning restore 612, 618
        }
    }
}
